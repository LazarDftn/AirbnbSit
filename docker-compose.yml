version: "3.8"

services:

  auth_service:
    image: auth_service
    container_name: auth_service
    hostname: ${AUTH_SERVICE_HOST}
    build:
      context: ./authorization/
      dockerfile: Dockerfile
    restart: always
    environment:
      AUTH_DB_HOST: ${AUTH_DB_HOST}
      AUTH_DB_PORT: ${AUTH_DB_PORT}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
    depends_on:
      - auth_db
    networks:
      - network

  accommodations_service:
    image: accommodations_service
    container_name: accommodations_service
    hostname: ${ACCOMMODATIONS_SERVICE_HOST}
    build:
      context: ./accommodations-service/
      dockerfile: Dockerfile
    restart: always
    environment:
      ACCOMMODATIONS_DB_HOST: ${ACCOMMODATIONS_DB_HOST}
      ACCOMMODATIONS_DB_PORT: ${ACCOMMODATIONS_DB_PORT}
      ACCOMMODATIONS_SERVICE_PORT: ${ACCOMMODATIONS_SERVICE_PORT}
    depends_on:
      - accommodations_db
    networks:
      - network

  reservation_service:
    image: reservation_service
    container_name: reservation_service
    hostname: "reservation_service"
    build:
      context: ./reservation-service/
      dockerfile: Dockerfile
    restart: always
    #Will be accessible through os.Getenv("PORT")
    environment:
      - PORT=8000
      # NoSQL: environment variable holding connection URI for Cassandra database
      - CASS_DB=reservation_db:9042
    # NoSQL: Extremely important! Cassandra takes a lot of time to start!
    # If we don't wait for it to fully initialize we will get exceptions and will not be able to connect!
    depends_on:
      reservation_db:
        condition: service_healthy
      reservations_mongo_db:
        condition: service_healthy
    networks:
      - network  

  api_gateway:
    build:
      context: ./api_gateway/
      dockerfile: Dockerfile
    container_name: api_gateway
    hostname: ${API_GATEWAY_HOST}
    restart: on-failure
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    depends_on:
      - auth_service
      - accommodations_service
      - reservation_service
    networks:
      - network

  auth_db:
    image: mongo
    container_name: auth_db
    restart: on-failure
    networks:
      - network

  accommodations_db:
    image: mongo
    container_name: accommodations_db
    restart: on-failure
    networks:
      - network

  reservations_mongo_db:
    image: mongo
    container_name: reservations_mongo_db
    restart: on-failure
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - network

  reservation_db:
    image: cassandra
    restart: always
    ports:
      - "9042:9042"
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 15s
      timeout: 15s
      retries: 15
    networks:
      - network

networks:
  network:
    driver: bridge